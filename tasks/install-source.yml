---
# Prepare host for installation
- name: Install dependencies for Redis. | Source install
  package:
    name: "{{ item }}"
    state: present
  with_items: "{{ redis_source_dependencies }}"

- name: Add Redis group | Source install
  group:
    name: "{{ redis_group }}"
    state: present
    system: true
  when: redis_group != "root"

- name: Add Redis user | Source install
  user:
    name: "{{ redis_user }}"
    group: "{{ redis_group }}"
    comment: "Redis"
    home: "{{ redis_install_dir }}"
    shell: /bin/false
    system: yes
  when: redis_user != "root"

- name: Create Redis directories | Source install
  file:
    path: "{{ item }}"
    state: directory
    mode: 0755
    owner: "{{ redis_user }}"    # This might break things,    only /ver/run/redis was owned by redis_user
  with_items:
    - "{{ redis_install_dir }}"
    - /etc/redis   # This should be a variable
    - /var/run/redis # This should be a variable
    # - "{{ redis_dir }}" This is done at configure-server.yml

# Download

# Check if file is downloaded?


# Redis uses a mix of sha1 and sha256 checksums.
# Determine the type of checksum based on its length and prefix the variable appropriately
- name: Set checksum | Source install
  set_fact:
    redis_checksum: "{{ 'sha1' if redis_checksums[redis_version]|length == 40 else 'sha256' }}:{{ redis_checksums[redis_version] }}"
  when:
    - redis_verify_checksum
    # - redis_checksum is not defined    I think this is if we wnat to specify a specific check supm
    - redis_version in redis_checksums

# verify checksum was by default false, this seems incorrect to me, I changed it to true


- name: Download Redis tarball | Source install
  get_url:
    url: "{{ redis_download_url }}"
    dest: "{{ redis_download_dir }}/redis-{{ redis_version }}.tar.gz"
    checksum: "{{ redis_checksum|default(omit) }}"
  # when: not redis_tarball   # I dont think i need this

# This seems redundant
# - name: upload redis
#   copy:
#     src: "{{ redis_tarball }}"
#     dest: "{{ redis_download_dir }}/redis-{{ redis_version }}.tar.gz"
#   when: redis_tarball|default(false)

- name: Extract redis tarball | Source install
  unarchive:
    src: "{{ redis_download_dir }}/redis-{{ redis_version }}.tar.gz"
    dest: "{{ redis_download_dir }}"
    creates: "{{ redis_download_dir }}/redis-{{ redis_version }}/Makefile"
    copy: no
  # when: not ansible_check_mode  # this is not documented, removing


  # cleanup download ?, maybe at the end


- name: Enable overcommit in sysctl | Source Install
  sysctl:
    name: vm.overcommit_memory
    value: "1"
    state: present
    reload: yes
    ignoreerrors: yes
  # when: redis_travis_ci is not defined

- name: Compile Redis | Source install
  # shell: umask 0022 && make -j{{ ansible_processor_cores|default(1) + 1 }}{{ ' 32bit' if redis_make_32bit|bool else '' }}
  shell: umask 0022 && make -j{{ ansible_processor_cores|default(1) + 1 }}{{ ' BUILD_TLS=yes' if redis_make_tls|bool else '' }}
  args:
    chdir: "{{ redis_download_dir }}/redis-{{ redis_version }}"
    creates: "{{ redis_download_dir }}/redis-{{ redis_version }}/src/redis-server"

- name: Install Redis | Source install
  shell: umask 0022 && make PREFIX={{ redis_install_dir }} install
  args:
    chdir: "{{ redis_download_dir }}/redis-{{ redis_version }}"
    creates: "{{ redis_install_dir }}/bin/redis-server"

# Check if needed
- name: Register Redis binaries | Source install
  command: ls -1 {{ redis_install_dir }}/bin
  register: _redis_binaries
  changed_when: false

- name: Add Redis binaries to alternatives | Source install
  alternatives:
    name: "{{ item }}"
    path: "{{ redis_install_dir }}/bin/{{ item }}"
    link: "/usr/bin/{{ item }}"
  with_items: "{{ _redis_binaries.stdout_lines }}"
  when: _redis_binaries is succeeded

# Setup SystemD service
- name: Create Redis Systemd service | Source Install
  template:
    src: redis-server.service.j2
    dest: /etc/systemd/system/{{ redis_service_name }}.service
    mode: 0644
  # with_first_found:
  #   - files:
  #     - "{{ ansible_os_family }}/redis.service.j2"
  #     - default/redis.service.j2
  #     paths:
  #       - ../templates
  # register: redis_unit_file
  # when: redis_as_service and ansible_service_mgr|default() == "systemd" and not (not redis_install_from_source and redis_service_name == 'redis')


# Moving this to configure after config file exists
# - name: Start and enable Redis service. | Package install
#   service:
#     name: "{{ redis_service_name }}"
#     state: started
#     enabled: true