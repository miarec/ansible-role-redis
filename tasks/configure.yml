---
# - name: create redis working directory
#   file:
#     path: "{{ redis_dir }}"
#     state: directory
#     recurse: yes
#     owner: "{{ redis_user }}"

# - name: create redis init script
#   template:
#     src: "{{ item }}"
#     dest: /etc/init.d/{{ redis_service_name }}
#     mode: 0755
#   # Choose the distro-specific template. We must specify the templates
#   # path here because with_first_found tries to find files in files/
#   with_first_found:
#     - files:
#       - "{{ ansible_os_family }}/redis.init.j2"
#       - default/redis.init.j2
#       paths:
#         - ../templates
#   when: redis_as_service and ansible_service_mgr|default() != "systemd" and not (not redis_install_from_source and redis_service_name == 'redis')

# - name: create redis systemd service
#   template:
#     src: "{{ item }}"
#     dest: /etc/systemd/system/{{ redis_service_name }}.service
#     mode: 0644
#   with_first_found:
#     - files:
#       - "{{ ansible_os_family }}/redis.service.j2"
#       - default/redis.service.j2
#       paths:
#         - ../templates
#   register: redis_unit_file
#   when: redis_as_service and ansible_service_mgr|default() == "systemd" and not (not redis_install_from_source and redis_service_name == 'redis')

# - name: create systemd tmpfiles configuration
#   template:
#     src: etc/tmpfiles.d/redis.conf.j2
#     dest: /etc/tmpfiles.d/redis.conf
#     mode: 0644
#   when:
#     - redis_as_service
#     - ansible_service_mgr|default() == 'systemd'
#     - (redis_pidfile|dirname).startswith('/var/run') or (redis_pidfile|dirname).startswith('/run')
#     - not (not redis_install_from_source and redis_service_name == 'redis')

# - name: reload systemd daemon
#   command: systemctl daemon-reload
#   when:
#     - redis_as_service
#     - ansible_service_mgr|default() == "systemd"
#     - redis_unit_file is changed

# - name: set redis to start at boot
#   service:
#     name: "{{ redis_service_name }}"
#     enabled: yes
#   when: redis_as_service

# # Check then create log dir to prevent aggressively overwriting permissions
# - name: check if log directory exists
#   stat:
#     path: "{{ redis_logfile|dirname }}"
#   register: logdir
#   changed_when: false
#   when: redis_logfile != '""'

- name: Create Redis directories | Configure Redis
  file:
    state: directory
    path: "{{ item }}"
    owner: "{{ redis_user }}"
    group: "{{ redis_group }}"
  with_items:
    - "{{ redis_logfile | dirname }}"
    - "{{ redis_dir }}"

  # when:
  #   - redis_logfile != '""'
    # - not logdir.stat.exists

# - name: create log file if it does not exist
#   copy:
#     dest: "{{ redis_logfile }}"
#     content: ""
#     force: false  # Don't override file contet if the file already exits
#     owner: "{{ redis_user }}"
#     group: "{{ redis_group }}"
#   when: redis_logfile != '""'

# - name: update permissions of log file if needed
#   file:
#     state: file
#     path: "{{ redis_logfile }}"
#     owner: "{{ redis_user }}"
#     group: "{{ redis_group }}"
#   when: redis_logfile != '""'

# - name: check if pid directory exists
#   stat:
#     path: "{{ redis_pidfile|dirname }}"
#   register: piddir
#   changed_when: false
#   when: redis_pidfile != '""'

# - name: create pid directory if it does not exist
#   file:
#     state: directory
#     path: "{{ redis_pidfile|dirname }}"
#     owner: "{{ redis_user }}"
#     group: "{{ redis_group }}"
#   when:
#     - redis_pidfile != '""'
#     - not piddir.stat.exists

- name: Create Redis config file | Configure Redis
  template:
    src: redis.conf.j2
    dest: "{{ redis_conf_dir }}/{{ redis_config_file_name }}"   # Should this be configurable ??
    owner: "{{ redis_user }}"
    group: "{{ redis_group }}"
    mode: 0640
  notify: "restart redis"

# This is redundant, everything in env file is also set in config file
# - name: add redis init config file
#   template:
#     dest: /etc/sysconfig/{{ redis_service_name }}
#     src: redis.init.conf.j2
#     mode: 0600
#   when: ansible_os_family == "RedHat"
#   notify: "restart redis"

# - name: add redis init config file
#   template:
#     dest: /etc/default/{{ redis_service_name }}
#     src: redis.init.conf.j2
#     mode: 0600
#   when: ansible_os_family == "Debian"
#   notify: "restart redis"

# # Flush handlers before ensuring the service is started to prevent
# # a start and then restart
# - name: flush handlers to apply config changes
#   meta: flush_handlers

# - name: ensure redis is running
#   service:
#     name: "{{ redis_service_name }}"
#     state: started
#   when: redis_as_service

- name: Start and enable Redis service. | Configure Redis
  service:
    name: "{{ redis_service_name }}"
    state: started
    enabled: true
  become: true